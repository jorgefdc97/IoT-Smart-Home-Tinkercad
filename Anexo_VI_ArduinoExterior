#include <Keypad.h>
#include <IRremote.hpp>
#include <Servo.h>

const int PIN_IR_RECEIVER = 2;
const int PIN_TRIGGER = 4; 
const int PIN_ECHO = 3;  
const int PIN_SERVO = 5; 
const int SENSOR_TEMP = A5;

const int SENSOR_DISTANCE = 300;
const int ECHO_TIMEOUT = 2000;
const int SERVO_TIMEOUT = 5000;
const int PASSWORD_SIZE = 4;
const int KEYPAD_WAIT = 1000;

Servo servo;
float duration;
float distance = 0;
float trigger_timestamp = 0;
float servo_timestamp = 0;
float keypad_timestamp = 0;



//4x4 keypad
const byte NUMBER_OF_ROWS = 4; 
const byte NUMBER_OF_COLS = 4; 
const char PASSWORD[PASSWORD_SIZE] = {'1','2','3','4'};
char ATTEMPT[PASSWORD_SIZE] = {'0','0','0','0'}; //input storage
int z;
char key_received;
int attempts_failed;

//keypad inputs
const char KEYMAP[NUMBER_OF_ROWS][NUMBER_OF_COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte ROW_PINS[NUMBER_OF_ROWS] = {9, 8, 7, 6}; // Linhas 1, 2, 3 e 4 do teclado
byte COLUMN_PINS[NUMBER_OF_COLS] = {13, 12, 11, 10};// Colunas 1, 2, 3 e 4 do teclado

Keypad keypad = Keypad( makeKeymap(KEYMAP), ROW_PINS, COLUMN_PINS, NUMBER_OF_ROWS, NUMBER_OF_COLS );

void setup()
{
  IrReceiver.begin(PIN_IR_RECEIVER, ENABLE_LED_FEEDBACK);
  pinMode(PIN_TRIGGER, OUTPUT); 
  pinMode(PIN_ECHO, INPUT);
  servo.attach(PIN_SERVO); 
  servo.write(0);
  Serial.begin(9600);
  z = 0;
  distance = 0;
  trigger_timestamp = 0;
  servo_timestamp = 0;
  keypad_timestamp = millis();
  attempts_failed = 0;
}

void loop()
{
  //ultrassonic echo
  if(millis() - trigger_timestamp > ECHO_TIMEOUT){
  	trigger_timestamp = millis();
  	digitalWrite(PIN_TRIGGER, HIGH);
  	delayMicroseconds(100);
  	digitalWrite(PIN_TRIGGER, LOW);
    duration = pulseIn(PIN_ECHO, HIGH);
    distance = (duration/2)/20.7;
    //Serial.print("distance: ");
    //Serial.print(distance);
    //Serial.println(" cm");
  }
  
  //servo work
  if(distance < SENSOR_DISTANCE && millis() - servo_timestamp > SERVO_TIMEOUT){
    servo_timestamp = millis();
    servo.write(90);
  }
  else if (millis() - servo_timestamp > SERVO_TIMEOUT){
    servo_timestamp = millis();
    servo.write(0); 
  }
  
  //remote control onput
  if (IrReceiver.decode()){
    auto command = IrReceiver.decodedIRData.command;
    Serial.print(command);
    if(command == 0){
      float command_pressed = millis();
      IrReceiver.resume();
      while(millis() - command_pressed < 1000 && z < 4){
        if (IrReceiver.decode()){
          auto key_command = IrReceiver.decodedIRData.command;
          if(key_command == 16){
            ATTEMPT[z] = 1;
          }else if(key_command == 17){
            ATTEMPT[z] = 2;
          }else if(key_command == 18){
            ATTEMPT[z] = 3;
          }else if(key_command == 20){
            ATTEMPT[z] = 4;
          }else{
            ATTEMPT[z] = -1;
          }
          ATTEMPT[z] = key_command;
          z++;
          command_pressed = millis();
        }
      }
      checkPassword();    
    }else if(command == 12){ // key 0 to check temperature
      float signal = analogRead(SENSOR_TEMP) * 5000.0 / 1024.0;
      // temperature from tension received
      float celsius = (signal - 500.0) / 10.0;
	  Serial.print("-");
      Serial.print(celsius);
      Serial.print(" C");
    }
    
    IrReceiver.resume();
  }
  
  //reading keypad
  float timestamp = millis();
  //Serial.print("START reading");
  while(millis() - timestamp < 1000){
    readKeypad();
  } 
  
}//end loop


//method to read keypad input
void readKeypad(){ 
  //keypad input
  keypad_timestamp = millis();
  while(millis() - keypad_timestamp < KEYPAD_WAIT){
    
    key_received = keypad.getKey();
	
    if(key_received != NO_KEY){
      if(key_received == '*'){
        z = 0;
      }else if(key_received == '#'){ // confirm password
        checkPassword(); 
      }else{ 
        //Serial.println(key_received);
        ATTEMPT[z] = key_received;
        z++;
        keypad_timestamp = millis();
      }
    }
    if(z > PASSWORD_SIZE){
      checkPassword();
    }
  }
}


//method to check key
void checkPassword(){
  int correct_digits = 0;
  int i = 0;
  while(i < PASSWORD_SIZE && ATTEMPT[i] == PASSWORD[i]){
    correct_digits++;
    //Serial.println(ATTEMPT[i]);
    i++;
  }
  
  if (correct_digits == PASSWORD_SIZE){  
    Serial.print("400");
    attempts_failed = 0;
  }else{
    attempts_failed++;
  }
    
  if(attempts_failed >= 3){
    Serial.print("401");
    attempts_failed = 0;
  }
  
  // clear previous attempt
  clearPassword();
}

void clearPassword(){
  for (int k=0; k < PASSWORD_SIZE; k++){ 
    ATTEMPT[k]=0;
  }
  z=0;
}